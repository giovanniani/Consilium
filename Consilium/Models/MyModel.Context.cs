

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Consilium.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class ConsiliumEntities : DbContext
{
    public ConsiliumEntities()
        : base("name=ConsiliumEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Request> Request { get; set; }

    public virtual DbSet<Justification> Justification { get; set; }

    public virtual DbSet<Motion> Motion { get; set; }

    public virtual DbSet<Agenda> Agenda { get; set; }

    public virtual DbSet<Comision> Comision { get; set; }

    public virtual DbSet<ComisionXSesion> ComisionXSesion { get; set; }

    public virtual DbSet<EstadoPunto> EstadoPunto { get; set; }

    public virtual DbSet<Justificacion> Justificacion { get; set; }

    public virtual DbSet<Logueo> Logueo { get; set; }

    public virtual DbSet<MiembroXComision> MiembroXComision { get; set; }

    public virtual DbSet<Mocion> Mocion { get; set; }

    public virtual DbSet<ProponenteXMocion> ProponenteXMocion { get; set; }

    public virtual DbSet<Punto> Punto { get; set; }

    public virtual DbSet<PuntoXAgenda> PuntoXAgenda { get; set; }

    public virtual DbSet<Sesion> Sesion { get; set; }

    public virtual DbSet<Solicitud> Solicitud { get; set; }

    public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }

    public virtual DbSet<TipoSesion> TipoSesion { get; set; }

    public virtual DbSet<TipoUsuario> TipoUsuario { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<MiembroXSesion> MiembroXSesion { get; set; }

    public virtual DbSet<ResultadoPunto> ResultadoPunto { get; set; }


    public virtual ObjectResult<Nullable<int>> getMiembrosXSesion(string idMiembro, Nullable<int> idSesion)
    {

        var idMiembroParameter = idMiembro != null ?
            new ObjectParameter("idMiembro", idMiembro) :
            new ObjectParameter("idMiembro", typeof(string));


        var idSesionParameter = idSesion.HasValue ?
            new ObjectParameter("idSesion", idSesion) :
            new ObjectParameter("idSesion", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getMiembrosXSesion", idMiembroParameter, idSesionParameter);
    }


    public virtual int updateMiembroXSesion(string idMiembro, Nullable<int> idSesion, Nullable<bool> isSelected)
    {

        var idMiembroParameter = idMiembro != null ?
            new ObjectParameter("idMiembro", idMiembro) :
            new ObjectParameter("idMiembro", typeof(string));


        var idSesionParameter = idSesion.HasValue ?
            new ObjectParameter("idSesion", idSesion) :
            new ObjectParameter("idSesion", typeof(int));


        var isSelectedParameter = isSelected.HasValue ?
            new ObjectParameter("isSelected", isSelected) :
            new ObjectParameter("isSelected", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateMiembroXSesion", idMiembroParameter, idSesionParameter, isSelectedParameter);
    }


    public virtual ObjectResult<getPuntosSesion_Result> getPuntosSesion(Nullable<int> idSesion)
    {

        var idSesionParameter = idSesion.HasValue ?
            new ObjectParameter("idSesion", idSesion) :
            new ObjectParameter("idSesion", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPuntosSesion_Result>("getPuntosSesion", idSesionParameter);
    }


    public virtual ObjectResult<getPunto_Result> getPunto(Nullable<int> idPunto)
    {

        var idPuntoParameter = idPunto.HasValue ?
            new ObjectParameter("idPunto", idPunto) :
            new ObjectParameter("idPunto", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPunto_Result>("getPunto", idPuntoParameter);
    }

}

}

